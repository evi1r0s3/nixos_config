unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
DETERMINISTIC_BUILD='1'
export DETERMINISTIC_BUILD
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/k48bha2fjqzarg52picsdfwlqx75aqbb-coreutils-9.5/bin:/nix/store/lfhmpajzgfmgl8xrdvp2r9hdi2rf17wy-findutils-4.10.0/bin:/nix/store/xrpvl6c1pyq7zazqnb41kgshmkr85da1-diffutils-3.10/bin:/nix/store/gvivnz7rb2gz1vy7d9mdxgzj9didz7w2-gnused-4.9/bin:/nix/store/14aswfz6pm8zvyyy927xzmi8x4rnvlc8-gnugrep-3.11/bin:/nix/store/45jb5s18799g8day8zjixrvknj4chp6r-gawk-5.3.1/bin:/nix/store/sdljgkhcmlflr785i4jffg1rvm294i1k-gnutar-1.35/bin:/nix/store/pg1n8f8zlwh4q4bsbnm9gwhx7cbix1m6-gzip-1.13/bin:/nix/store/y59bxw99pbld247dznzv352cqdhlybqi-bzip2-1.0.8-bin/bin:/nix/store/a08385589ajv3ahmp81nml9bh5dsi55n-gnumake-4.4.1/bin:/nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37/bin:/nix/store/0knrdpnzi5s4igcvzw8yhkj8daq84a2v-patch-2.7.6/bin:/nix/store/g6rf9zyrz8hrgz4r7sd2hab3j1afxdkr-xz-5.6.3-bin/bin:/nix/store/83jpg0nha0gp1pggdvsk7zh6wn5lgm00-file-5.45/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LINENO='76'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/9bacph866qhmr2zfib1h49jixq5hhd01-binutils-wrapper-2.43.1'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='20'
export NIX_BUILD_CORES
NIX_CC='/nix/store/3ix5h74n7ar9950vwzp4dxmil70pmx0k-gcc-wrapper-13.3.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=54aiwz7sny -isystem /nix/store/a4sdf1jry1vk272v3vqqr88msva7v5j6-nix-2.24.10-dev/include -isystem /nix/store/lmas3i7igbfidfj9gcv304003qg429pf-boehm-gc-8.2.8-dev/include -isystem /nix/store/hg100ak26qlkccaazbcbl8hl605smmwp-nlohmann_json-3.11.3/include -isystem /nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7/include -isystem /nix/store/6wamfkk3mmwq4nj64lfrnvxd8c4lvkd6-python3.12-persistent-6.1/include -isystem /nix/store/1gm217i0hwhf879vdh6bw3zcb7nrr3wn-python3.12-zope-proxy-5.3/include -isystem /nix/store/a4sdf1jry1vk272v3vqqr88msva7v5j6-nix-2.24.10-dev/include -isystem /nix/store/lmas3i7igbfidfj9gcv304003qg429pf-boehm-gc-8.2.8-dev/include -isystem /nix/store/hg100ak26qlkccaazbcbl8hl605smmwp-nlohmann_json-3.11.3/include -isystem /nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7/include -isystem /nix/store/6wamfkk3mmwq4nj64lfrnvxd8c4lvkd6-python3.12-persistent-6.1/include -isystem /nix/store/1gm217i0hwhf879vdh6bw3zcb7nrr3wn-python3.12-zope-proxy-5.3/include'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs'
export NIX_HARDENING_ENABLE
NIX_LDFLAGS='-rpath /home/evi1_f4iry/git/nixos_config/outputs/out/lib  -L/nix/store/x47pd7v9lnkarqhbnbg84r049sq6rx65-boehm-gc-8.2.8/lib -L/nix/store/42lxam32cqq9sn2zdz4ym6ls2dzmfn19-nix-2.24.10/lib -L/nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7/lib -L/nix/store/x47pd7v9lnkarqhbnbg84r049sq6rx65-boehm-gc-8.2.8/lib -L/nix/store/42lxam32cqq9sn2zdz4ym6ls2dzmfn19-nix-2.24.10/lib -L/nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7/lib'
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/8mxmlg3ifl83lgz9ccsd3dp8whfm4frj-cachix-1.7.5-bin/bin:/nix/store/vwzwki4qrsbjaj7mnj6mimscdl1cqzbh-niv-0.2.22-bin/bin:/nix/store/85rlbi4xwksklzl5lj4m8wmnh55336hs-nixfmt-0.6.0-bin/bin:/nix/store/r4qxqjm41y7dpr0jalh468f4jywqkdk5-statix-0.5.8/bin:/nix/store/qasvj1lnqqqfyayglbk3gfypblzrs12m-vulnix-1.10.1-unstable-2024-04-02/bin:/nix/store/42lxam32cqq9sn2zdz4ym6ls2dzmfn19-nix-2.24.10/bin:/nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7/bin:/nix/store/fllzksyfjx16d4pkd67804bv9mgq3aa4-python3.12-charset-normalizer-3.3.2/bin:/nix/store/7xj1pcwsf9dmjg8gfm0xlyzjf5pwmgcm-python3.12-zodb-6.0/bin:/nix/store/bhc632v37bc815ik14ywibjba13fj1ap-python3.12-zconfig-4.1/bin:/nix/store/iv757nm0p4g3z25vfspn3vdgwj2wdyxq-python3.12-zope.testrunner-6.4/bin:/nix/store/clriq56fvbrjhcwxlv17vx6gj1h63vzv-dhall-nix-1.1.26/bin:/nix/store/w3q27j12a7lsmgkzqawqkbyp86hnm8c0-dhall-1.42.1/bin:/nix/store/p1m7vcvswki03q8dk1yqah8h8zb406ra-aeson-pretty-0.8.10/bin:/nix/store/f7ffshd3mjlnnl6wc0pic4sr361pb1mj-pretty-simple-4.1.2.0/bin:/nix/store/z0030jafpqr2m34zdbifr3p6c6zr5k0i-hnix-0.17.0/bin:/nix/store/j32r2697y38s69jqwnhb1sm54hq4slzw-hashing-0.1.1.0/bin:/nix/store/6snmnic1bazjca8pwk4xkip60x8khj1d-nix-derivation-1.1.3/bin:/nix/store/slpvyyv04p0rcz215h47j1dfp6ympl6r-pretty-show-1.10/bin:/nix/store/p5i56njd7922m53rzjyjk59l9hrsp4wf-optparse-generic-1.5.2/bin:/nix/store/ffgw5dddlhic1gpagpywhhfj4h1lgnd5-nil-2024-08-06/bin:/nix/store/gc4rj634xf8bk5m2s44mf1qp3hiyj93k-taplo-0.9.3/bin:/nix/store/lycrxk2ypz3hz6iw63v6nbijnnlvdnch-lua-language-server-3.13.0/bin:/nix/store/xjlvb8x7z3f5rxxswa3c6ghay74a58jm-patchelf-0.15.0/bin:/nix/store/3ix5h74n7ar9950vwzp4dxmil70pmx0k-gcc-wrapper-13.3.0/bin:/nix/store/xzfmarrq8x8s4ivpya24rrndqsq2ndiz-gcc-13.3.0/bin:/nix/store/26dy2y29fhissya64ygahwpidpvs3bm3-glibc-2.40-36-bin/bin:/nix/store/k48bha2fjqzarg52picsdfwlqx75aqbb-coreutils-9.5/bin:/nix/store/9bacph866qhmr2zfib1h49jixq5hhd01-binutils-wrapper-2.43.1/bin:/nix/store/va7kw1i822h95im4jacci19v0cqajfyf-binutils-2.43.1/bin:/nix/store/k48bha2fjqzarg52picsdfwlqx75aqbb-coreutils-9.5/bin:/nix/store/lfhmpajzgfmgl8xrdvp2r9hdi2rf17wy-findutils-4.10.0/bin:/nix/store/xrpvl6c1pyq7zazqnb41kgshmkr85da1-diffutils-3.10/bin:/nix/store/gvivnz7rb2gz1vy7d9mdxgzj9didz7w2-gnused-4.9/bin:/nix/store/14aswfz6pm8zvyyy927xzmi8x4rnvlc8-gnugrep-3.11/bin:/nix/store/45jb5s18799g8day8zjixrvknj4chp6r-gawk-5.3.1/bin:/nix/store/sdljgkhcmlflr785i4jffg1rvm294i1k-gnutar-1.35/bin:/nix/store/pg1n8f8zlwh4q4bsbnm9gwhx7cbix1m6-gzip-1.13/bin:/nix/store/y59bxw99pbld247dznzv352cqdhlybqi-bzip2-1.0.8-bin/bin:/nix/store/a08385589ajv3ahmp81nml9bh5dsi55n-gnumake-4.4.1/bin:/nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37/bin:/nix/store/0knrdpnzi5s4igcvzw8yhkj8daq84a2v-patch-2.7.6/bin:/nix/store/g6rf9zyrz8hrgz4r7sd2hab3j1afxdkr-xz-5.6.3-bin/bin:/nix/store/83jpg0nha0gp1pggdvsk7zh6wn5lgm00-file-5.45/bin'
export PATH
PS4='+ '
PYTHONHASHSEED='0'
export PYTHONHASHSEED
PYTHONNOUSERSITE='1'
export PYTHONNOUSERSITE
PYTHONPATH='/nix/store/qasvj1lnqqqfyayglbk3gfypblzrs12m-vulnix-1.10.1-unstable-2024-04-02/lib/python3.12/site-packages:/nix/store/9l7cdymnw9ck7l7hk1d7n6yc2ql3a0j0-python3.12-click-8.1.7/lib/python3.12/site-packages:/nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7/lib/python3.12/site-packages:/nix/store/5krf5yyl6qxw2kf2m4dq0svrqgqnfaja-python3.12-colorama-0.4.6/lib/python3.12/site-packages:/nix/store/40z55rks21klchc1mz66jsipqbyq2kah-python3.12-pyyaml-6.0.2/lib/python3.12/site-packages:/nix/store/hzx37lg2l7km3v2bwz1cajgb845b0rsh-python3.12-requests-2.32.3/lib/python3.12/site-packages:/nix/store/89gqzn2r629czwcmzp1m1nc2hzii1xkp-python3.12-brotlicffi-1.1.0.0/lib/python3.12/site-packages:/nix/store/4xv5z10d0dh3s2qys0ih18jhzkr5pr0c-python3.12-cffi-1.17.1/lib/python3.12/site-packages:/nix/store/zia9vp8mkha1ipnyhq57akfcxz46g58k-python3.12-pycparser-2.22/lib/python3.12/site-packages:/nix/store/3acnm7aiffnwakr7vz36psi890yzrcsx-python3.12-certifi-2024.08.30/lib/python3.12/site-packages:/nix/store/fllzksyfjx16d4pkd67804bv9mgq3aa4-python3.12-charset-normalizer-3.3.2/lib/python3.12/site-packages:/nix/store/a59apy2vpm43rwiicpqvf47llvrpb5zg-python3.12-idna-3.10/lib/python3.12/site-packages:/nix/store/47r6mxks3yssfyw5ri42vszxax44931b-python3.12-urllib3-2.2.3/lib/python3.12/site-packages:/nix/store/0kfk8id0zkrkbpn668n378mk2awxlnxc-python3.12-setuptools-75.1.0/lib/python3.12/site-packages:/nix/store/ycni7dn5flb7kxn8inqa3w4qbif3yyzj-python3.12-toml-0.10.2/lib/python3.12/site-packages:/nix/store/7xj1pcwsf9dmjg8gfm0xlyzjf5pwmgcm-python3.12-zodb-6.0/lib/python3.12/site-packages:/nix/store/lndahxq8gh4cwvvm8a1n10g9xb0fq4bl-python3.12-transaction-4.0/lib/python3.12/site-packages:/nix/store/6bk1hlz035v8dw7rlgl3rkb0ac846nin-python3.12-zope.interface-6.4.post2/lib/python3.12/site-packages:/nix/store/53g9xnpmf4fxyb7v7q8gh4nyjvmdrgq8-python3.12-zope.event-4.6/lib/python3.12/site-packages:/nix/store/d091gflwf9r0z8685iqlrvp62b21pb34-python3.12-mock-5.1.0/lib/python3.12/site-packages:/nix/store/336bnn37fl00mcvw7gqwwqflhncqi3jx-python3.12-six-1.16.0/lib/python3.12/site-packages:/nix/store/m3izkm06xgbpc3a7dk5ch0ahwn88djm4-python3.12-zodbpickle-4.1.1/lib/python3.12/site-packages:/nix/store/bhc632v37bc815ik14ywibjba13fj1ap-python3.12-zconfig-4.1/lib/python3.12/site-packages:/nix/store/iv757nm0p4g3z25vfspn3vdgwj2wdyxq-python3.12-zope.testrunner-6.4/lib/python3.12/site-packages:/nix/store/fvk7626gnh7pn4avkcrky94fx9z1ryb3-python3.12-zope-exceptions-5.1/lib/python3.12/site-packages:/nix/store/xzpvvy01sw635vgx24g9irgyysw547iv-python3.12-zope-testing-5.0.1/lib/python3.12/site-packages:/nix/store/6wamfkk3mmwq4nj64lfrnvxd8c4lvkd6-python3.12-persistent-6.1/lib/python3.12/site-packages:/nix/store/n29dcvn84vr0g49lkrgy8cwgjg6m7zm2-python3.12-zope-deferredimport-5.0/lib/python3.12/site-packages:/nix/store/1gm217i0hwhf879vdh6bw3zcb7nrr3wn-python3.12-zope-proxy-5.3/lib/python3.12/site-packages:/nix/store/kpqcjf31ramkia4xlv1cig012awqr71y-python3.12-zc-lockfile-3.0.post1/lib/python3.12/site-packages:/nix/store/k17dal5pjqzjq6ykfxjfyq3qi3lj3bi6-python3.12-btrees-6.1/lib/python3.12/site-packages'
export PYTHONPATH
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
SHELL='/nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37/bin/bash'
export SHELL
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/8mxmlg3ifl83lgz9ccsd3dp8whfm4frj-cachix-1.7.5-bin/share:/nix/store/x47pd7v9lnkarqhbnbg84r049sq6rx65-boehm-gc-8.2.8/share:/nix/store/hg100ak26qlkccaazbcbl8hl605smmwp-nlohmann_json-3.11.3/share:/nix/store/42lxam32cqq9sn2zdz4ym6ls2dzmfn19-nix-2.24.10/share:/nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7/share:/nix/store/clriq56fvbrjhcwxlv17vx6gj1h63vzv-dhall-nix-1.1.26/share:/nix/store/w3q27j12a7lsmgkzqawqkbyp86hnm8c0-dhall-1.42.1/share:/nix/store/cmdh99fpsj66wnxd8brixfmr21n7wnzy-attoparsec-0.14.4/share:/nix/store/i1rgr0a0gpz29h3jjkq1fzibpl59rvrn-attoparsec-aeson-2.1.0.0/share:/nix/store/z0030jafpqr2m34zdbifr3p6c6zr5k0i-hnix-0.17.0/share:/nix/store/lycrxk2ypz3hz6iw63v6nbijnnlvdnch-lua-language-server-3.13.0/share:/nix/store/xjlvb8x7z3f5rxxswa3c6ghay74a58jm-patchelf-0.15.0/share'
export XDG_DATA_DIRS
_PYTHON_HOST_PLATFORM='linux-x86_64'
export _PYTHON_HOST_PLATFORM
_PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu'
export _PYTHON_SYSCONFIGDATA_NAME
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs=''
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/xjlvb8x7z3f5rxxswa3c6ghay74a58jm-patchelf-0.15.0 /nix/store/sjdccq7ywcpfjnmisl0ah60b7rg1cjpf-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/12lvf0c7xric9cny7slvf9cmhypl1p67-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/aazf105snicrlvyzzbdj85sx4179rpfp-set-source-date-epoch-to-latest.sh /nix/store/gps9qrh99j7g02840wv5x78ykmz30byp-strip.sh /nix/store/3ix5h74n7ar9950vwzp4dxmil70pmx0k-gcc-wrapper-13.3.0'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=('addPythonPath' 'sysconfigdataHook' )
declare -a envBuildHostHooks=('addPythonPath' 'sysconfigdataHook' )
declare -a envBuildTargetHooks=('addPythonPath' 'sysconfigdataHook' )
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
guess='20'
initialPath='/nix/store/k48bha2fjqzarg52picsdfwlqx75aqbb-coreutils-9.5 /nix/store/lfhmpajzgfmgl8xrdvp2r9hdi2rf17wy-findutils-4.10.0 /nix/store/xrpvl6c1pyq7zazqnb41kgshmkr85da1-diffutils-3.10 /nix/store/gvivnz7rb2gz1vy7d9mdxgzj9didz7w2-gnused-4.9 /nix/store/14aswfz6pm8zvyyy927xzmi8x4rnvlc8-gnugrep-3.11 /nix/store/45jb5s18799g8day8zjixrvknj4chp6r-gawk-5.3.1 /nix/store/sdljgkhcmlflr785i4jffg1rvm294i1k-gnutar-1.35 /nix/store/pg1n8f8zlwh4q4bsbnm9gwhx7cbix1m6-gzip-1.13 /nix/store/y59bxw99pbld247dznzv352cqdhlybqi-bzip2-1.0.8-bin /nix/store/a08385589ajv3ahmp81nml9bh5dsi55n-gnumake-4.4.1 /nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37 /nix/store/0knrdpnzi5s4igcvzw8yhkj8daq84a2v-patch-2.7.6 /nix/store/g6rf9zyrz8hrgz4r7sd2hab3j1afxdkr-xz-5.6.3-bin /nix/store/83jpg0nha0gp1pggdvsk7zh6wn5lgm00-file-5.45'
mesonFlags=''
export mesonFlags
name='nix-shell-env'
export name
nativeBuildInputs='/nix/store/8mxmlg3ifl83lgz9ccsd3dp8whfm4frj-cachix-1.7.5-bin /nix/store/vwzwki4qrsbjaj7mnj6mimscdl1cqzbh-niv-0.2.22-bin /nix/store/85rlbi4xwksklzl5lj4m8wmnh55336hs-nixfmt-0.6.0-bin /nix/store/r4qxqjm41y7dpr0jalh468f4jywqkdk5-statix-0.5.8 /nix/store/qasvj1lnqqqfyayglbk3gfypblzrs12m-vulnix-1.10.1-unstable-2024-04-02 /nix/store/clriq56fvbrjhcwxlv17vx6gj1h63vzv-dhall-nix-1.1.26 /nix/store/ffgw5dddlhic1gpagpywhhfj4h1lgnd5-nil-2024-08-06 /nix/store/85rlbi4xwksklzl5lj4m8wmnh55336hs-nixfmt-0.6.0-bin /nix/store/gc4rj634xf8bk5m2s44mf1qp3hiyj93k-taplo-0.9.3 /nix/store/lycrxk2ypz3hz6iw63v6nbijnnlvdnch-lua-language-server-3.13.0'
export nativeBuildInputs
out='/home/evi1_f4iry/git/nixos_config/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/3ix5h74n7ar9950vwzp4dxmil70pmx0k-gcc-wrapper-13.3.0'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/8mxmlg3ifl83lgz9ccsd3dp8whfm4frj-cachix-1.7.5-bin' '/nix/store/vwzwki4qrsbjaj7mnj6mimscdl1cqzbh-niv-0.2.22-bin' '/nix/store/85rlbi4xwksklzl5lj4m8wmnh55336hs-nixfmt-0.6.0-bin' '/nix/store/r4qxqjm41y7dpr0jalh468f4jywqkdk5-statix-0.5.8' '/nix/store/qasvj1lnqqqfyayglbk3gfypblzrs12m-vulnix-1.10.1-unstable-2024-04-02' '/nix/store/a4sdf1jry1vk272v3vqqr88msva7v5j6-nix-2.24.10-dev' '/nix/store/lmas3i7igbfidfj9gcv304003qg429pf-boehm-gc-8.2.8-dev' '/nix/store/x47pd7v9lnkarqhbnbg84r049sq6rx65-boehm-gc-8.2.8' '/nix/store/hg100ak26qlkccaazbcbl8hl605smmwp-nlohmann_json-3.11.3' '/nix/store/42lxam32cqq9sn2zdz4ym6ls2dzmfn19-nix-2.24.10' '/nix/store/9l7cdymnw9ck7l7hk1d7n6yc2ql3a0j0-python3.12-click-8.1.7' '/nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7' '/nix/store/5krf5yyl6qxw2kf2m4dq0svrqgqnfaja-python3.12-colorama-0.4.6' '/nix/store/40z55rks21klchc1mz66jsipqbyq2kah-python3.12-pyyaml-6.0.2' '/nix/store/hzx37lg2l7km3v2bwz1cajgb845b0rsh-python3.12-requests-2.32.3' '/nix/store/89gqzn2r629czwcmzp1m1nc2hzii1xkp-python3.12-brotlicffi-1.1.0.0' '/nix/store/4xv5z10d0dh3s2qys0ih18jhzkr5pr0c-python3.12-cffi-1.17.1' '/nix/store/zia9vp8mkha1ipnyhq57akfcxz46g58k-python3.12-pycparser-2.22' '/nix/store/3acnm7aiffnwakr7vz36psi890yzrcsx-python3.12-certifi-2024.08.30' '/nix/store/fllzksyfjx16d4pkd67804bv9mgq3aa4-python3.12-charset-normalizer-3.3.2' '/nix/store/a59apy2vpm43rwiicpqvf47llvrpb5zg-python3.12-idna-3.10' '/nix/store/47r6mxks3yssfyw5ri42vszxax44931b-python3.12-urllib3-2.2.3' '/nix/store/0kfk8id0zkrkbpn668n378mk2awxlnxc-python3.12-setuptools-75.1.0' '/nix/store/ycni7dn5flb7kxn8inqa3w4qbif3yyzj-python3.12-toml-0.10.2' '/nix/store/7xj1pcwsf9dmjg8gfm0xlyzjf5pwmgcm-python3.12-zodb-6.0' '/nix/store/lndahxq8gh4cwvvm8a1n10g9xb0fq4bl-python3.12-transaction-4.0' '/nix/store/6bk1hlz035v8dw7rlgl3rkb0ac846nin-python3.12-zope.interface-6.4.post2' '/nix/store/53g9xnpmf4fxyb7v7q8gh4nyjvmdrgq8-python3.12-zope.event-4.6' '/nix/store/d091gflwf9r0z8685iqlrvp62b21pb34-python3.12-mock-5.1.0' '/nix/store/336bnn37fl00mcvw7gqwwqflhncqi3jx-python3.12-six-1.16.0' '/nix/store/m3izkm06xgbpc3a7dk5ch0ahwn88djm4-python3.12-zodbpickle-4.1.1' '/nix/store/bhc632v37bc815ik14ywibjba13fj1ap-python3.12-zconfig-4.1' '/nix/store/iv757nm0p4g3z25vfspn3vdgwj2wdyxq-python3.12-zope.testrunner-6.4' '/nix/store/fvk7626gnh7pn4avkcrky94fx9z1ryb3-python3.12-zope-exceptions-5.1' '/nix/store/xzpvvy01sw635vgx24g9irgyysw547iv-python3.12-zope-testing-5.0.1' '/nix/store/6wamfkk3mmwq4nj64lfrnvxd8c4lvkd6-python3.12-persistent-6.1' '/nix/store/n29dcvn84vr0g49lkrgy8cwgjg6m7zm2-python3.12-zope-deferredimport-5.0' '/nix/store/1gm217i0hwhf879vdh6bw3zcb7nrr3wn-python3.12-zope-proxy-5.3' '/nix/store/kpqcjf31ramkia4xlv1cig012awqr71y-python3.12-zc-lockfile-3.0.post1' '/nix/store/k17dal5pjqzjq6ykfxjfyq3qi3lj3bi6-python3.12-btrees-6.1' '/nix/store/clriq56fvbrjhcwxlv17vx6gj1h63vzv-dhall-nix-1.1.26' '/nix/store/z6g4js9wy0fj7h6ywalk315m37dz73zp-data-fix-0.3.4' '/nix/store/1rwmfb7a5k4lj01msxw1r0wkcips5fww-hashable-1.4.4.0' '/nix/store/x767r9fmz6ngkr32yxslghqm4f48hn91-os-string-2.0.6' '/nix/store/w3q27j12a7lsmgkzqawqkbyp86hnm8c0-dhall-1.42.1' '/nix/store/mmimpcfx4p975rscc5nkh25izj87r3cc-aeson-2.1.2.1' '/nix/store/cmdh99fpsj66wnxd8brixfmr21n7wnzy-attoparsec-0.14.4' '/nix/store/5r9nx4mi42m3nrs14bxadhhm33zj64sx-scientific-0.3.7.0' '/nix/store/vi7crvyqhfbp2x205kdb0wnrflzlmyxi-integer-logarithms-1.0.3.1' '/nix/store/xqacgjir8yp3c603171jbss4rcw22fnr-primitive-0.8.0.0' '/nix/store/qib4yid583wmm9yparpr3rl98lap4c8s-base-compat-batteries-0.13.1' '/nix/store/42jkd7ac2mhbrs6ffyy49cp0y20835s9-base-compat-0.13.1' '/nix/store/599y74vymh1vsf9iw49avs3h06aa49p1-dlist-1.0' '/nix/store/6q0f6nic96gi2qa1y148j797935qzybb-generically-0.1.1' '/nix/store/f3460sb4zv8i8l5k5nvrr9nig76dab41-indexed-traversable-0.1.4' '/nix/store/ali65ijwdcskjnnxw9npafc5xzchcgq6-OneTuple-0.4.2' '/nix/store/k3l26yjgd0vfjgm8fdhkk4paygn2xym0-QuickCheck-2.14.3' '/nix/store/50vk942bjciaxfxpvcirr612x55v8lav-random-1.2.1.2' '/nix/store/l8f1d99dw8mfn0g6y3wjdbgbg3h039gr-splitmix-0.1.0.5' '/nix/store/l8f1d99dw8mfn0g6y3wjdbgbg3h039gr-splitmix-0.1.0.5' '/nix/store/8qxdy5wf995nl8l64m181m3dals1vcwz-semialign-1.3.1' '/nix/store/jicmlnr9kxmxgbym0v7r12zk825gdws2-indexed-traversable-instances-0.1.2' '/nix/store/0g0p5h19bllig4qk0dxii3gsvzlycssh-tagged-0.8.8' '/nix/store/4i5bckymgx1h6dlm6l0prbrbqbha45my-unordered-containers-0.2.20' '/nix/store/vngsg12jaf3r5z3dvr887sl0j24vgl0k-vector-0.13.1.0' '/nix/store/kp5pjms1nkd97z3mw4wp28zk7r1k0w6p-vector-stream-0.1.0.1' '/nix/store/hlf0kczjpipqqcnxvq20g10vmyfzxxkw-semigroupoids-6.0.1' '/nix/store/brcb7sc41v51x2qkd3kgx7rb1hhbramp-base-orphans-0.9.2' '/nix/store/086b5w52m7kfzdwvk67ar0y6c2qigy4j-bifunctors-5.6.2' '/nix/store/nrizs6ihsw2xnk7djfw5nw9jcqrsah8i-assoc-1.1.1' '/nix/store/xwabjifaij6nmwxi2qj2nfw39cd7szgc-comonad-5.0.8' '/nix/store/4zpc2114y31w6d1zz3m0ym86xwcwwkwi-distributive-0.6.2.1' '/nix/store/5mnp4i185zwv17jfi27md4cvz8gbzv9s-transformers-compat-0.7.2' '/nix/store/3xl5dhlfr0na37zwzya41km5z1z03d9c-th-abstraction-0.5.0.0' '/nix/store/zvgcdnwjvvin1j20d1rih6gqccl9mvij-contravariant-1.5.5' '/nix/store/dmx447rnr8kr1kfj0q02l4ivhlghdihr-StateVar-1.2.2' '/nix/store/4gwa093flsd2wv7ripa6gvjklih0jydr-these-1.2.1' '/nix/store/078gqn1rr4rh9laxaxyl38yawh4a4wqd-strict-0.5' '/nix/store/nrzs8anfkqn71abr653747wcdfy0vzch-text-short-0.1.6' '/nix/store/5k7012hzp93dj9qsr2d267kf79zk18c8-time-compat-1.9.6.1' '/nix/store/39afq1dvvykgpp2lyv9fivsw49x4983p-uuid-types-1.0.5.1' '/nix/store/8nyp572mpmg6ng0185dan64vamq5zad5-witherable-0.4.2' '/nix/store/p1m7vcvswki03q8dk1yqah8h8zb406ra-aeson-pretty-0.8.10' '/nix/store/i1rgr0a0gpz29h3jjkq1fzibpl59rvrn-attoparsec-aeson-2.1.0.0' '/nix/store/jpnbbv1sy46lcdz252zykhx0rvi21m9i-cmdargs-0.10.22' '/nix/store/idha1b684mwgxh314jaq0xlmvcr8hvb0-ansi-terminal-1.0.2' '/nix/store/xr654zwgny6q17846xfyl2g15c3h0m3i-ansi-terminal-types-0.11.5' '/nix/store/1qwii0wv4fbbkj0kngwgwfr4a9ijqayg-colour-2.3.6' '/nix/store/1qwii0wv4fbbkj0kngwgwfr4a9ijqayg-colour-2.3.6' '/nix/store/4mc9jfs3akvw7px6irb9hckygclhcy7a-atomic-write-0.2.1.0' '/nix/store/1div3jim1whapdm73c2q07ksc0wizr28-temporary-1.3' '/nix/store/rrbxikj428c5m7r8xdyldyiqpwqx911a-unix-compat-0.7.3' '/nix/store/9dddklhc7c20dm1brpkyiljm89sblqwk-base16-bytestring-1.0.2.0' '/nix/store/myqnd0z2ci5q2cq97wjgd7jj36xsr14s-case-insensitive-1.2.1.0' '/nix/store/bw1y5dhjzwzsb39fj0p05dhnwzll81k6-cborg-0.2.10.0' '/nix/store/zp9q3hgbjjmv8b42viadpldf8c5d0ik9-half-0.3.1' '/nix/store/0hbpxk1zaq1vp44jfpl53l7jggy73drd-cborg-json-0.2.6.0' '/nix/store/32l04zx3xkn0252z90xvgqskxv7jj0gy-base64-bytestring-1.2.1.0' '/nix/store/9yp1rryzy3dhinv6mmib91ilz0rd7k0f-cryptohash-sha256-0.11.102.1' '/nix/store/x9jnlv4i1pdr8inh4gkr111n50a7npf7-Diff-0.4.1' '/nix/store/bygklm19xw2dh8k143w77v3b03sdxznr-dotgen-0.4.3' '/nix/store/x08ax33qmryq8msvqxh8p95rzf4r1863-either-5.0.2' '/nix/store/7jczxr2px9jbm6nwc7kf3c5rs0k8py7q-profunctors-5.6.2' '/nix/store/98bjmccv31gad9w39wyx1d0cpqdhll70-http-client-0.7.17' '/nix/store/ahbjxr284n9mr06w2cgsj1v4msa2rqja-async-2.2.5' '/nix/store/4gcaqjrp6gfijx9dpbniznwg3k82lk3p-blaze-builder-0.4.2.3' '/nix/store/3xbv9l0w4bq75wagpi49z6jxyf19ql5l-cookie-0.4.6' '/nix/store/has8529ykyddfkswgw3cfgzkmfpqly63-data-default-class-0.1.2.2' '/nix/store/dvarqqv4vxwk0a2hxwm5n58df5c78gbl-http-types-0.12.4' '/nix/store/dv88qfqyyix55znwv7yhvbalqn52f1vn-iproute-1.7.14' '/nix/store/rmza62z66qwp4ira1f9f46mn3cw3grmq-appar-0.1.8' '/nix/store/0i6c7gmhvr0jzk98bqzypby181b9pmar-byteorder-1.0.4' '/nix/store/4zn1akrx0msn8yd9jsbahr2xw5bsvwbp-network-3.1.4.0' '/nix/store/w1mspyhhsjvqwim915k96d5rlixp1znz-mime-types-0.1.2.0' '/nix/store/42ac3rdmpn84nslasfpyz6aqnlp98jgp-network-uri-2.6.4.2' '/nix/store/plxh0knn5mgx4jmaqa5rj2g4zd0xi56r-th-compat-0.1.5' '/nix/store/qrj0h7a5i6gpf9sna1m32r7vxcq2qc2a-streaming-commons-0.2.2.6' '/nix/store/a9pzl67blbykhc03hb74adnnrdvijbnw-zlib-0.6.3.0' '/nix/store/k4yi20wa8isyknb1wxrjvs67k9mmfgj0-http-client-tls-0.3.6.3' '/nix/store/ld5f1c8l54hz9x69rspxj516040x7n14-crypton-0.34' '/nix/store/55n0j1qdl5f226sivdr9mkfysjdsb2k9-basement-0.0.16' '/nix/store/4yiqaxisi7zs62j8rzf6zd36xynb5spn-memory-0.18.0' '/nix/store/0p6107dx7jz2dq4fzzzc0xczkjv5hgqa-crypton-connection-0.3.2' '/nix/store/9qvfk4zab4bmmv2xnxb2pqwsf1r9ljhp-crypton-x509-1.7.7' '/nix/store/n3wvy66ja16ih0smjcknzvwxn2msp0cp-asn1-encoding-0.9.6' '/nix/store/hvdvhfcf23f8mlzyi0cy2af5zx3wn1sd-asn1-types-0.3.4' '/nix/store/qivhzfpyz86gdrvayj9xgrvvmz1x2axj-hourglass-0.2.12' '/nix/store/qivhzfpyz86gdrvayj9xgrvvmz1x2axj-hourglass-0.2.12' '/nix/store/m8s1k5l7gy5mqpb1c9b8as1qr299rnkh-asn1-parse-0.9.5' '/nix/store/7c67m0qks5c1cxxawsx7cr4myzpg90q2-pem-0.2.4' '/nix/store/pfym2nsxfrpkgrb19ykbg5b4v81z0q4z-crypton-x509-store-1.6.9' '/nix/store/m32y2cc7h85jhysfs5vmgf8xqr861bcc-crypton-x509-system-1.6.7' '/nix/store/2lq33cbwis9cqbjii9sbpnv00rkm3q98-crypton-x509-validation-1.6.12' '/nix/store/rq1il15nbd3b7d8cgclh7vk8yxzr5nr9-socks-0.6.1' '/nix/store/5x9vss560alqja63d2bfabc54hfrkb97-cereal-0.5.8.3' '/nix/store/7ppzzfq12gy22zvyikr5rsd4rb82qijm-tls-1.8.0' '/nix/store/jmdw7qbvgidvsk3mk96514qv070k9zgi-unix-time-0.4.15' '/nix/store/w30gxn9a76r5rq7hd8y5rjcm1lnl710r-old-time-1.1.0.4' '/nix/store/j7yr0b90shi74jafislbb2rsphp6ziip-old-locale-1.0.0.7' '/nix/store/n4a094drn6cqkbxdjhk4a9w0l71zw51j-lens-family-core-2.1.3' '/nix/store/qmdaa04gwmvig8axmxrv5zirbsigypdv-megaparsec-9.5.0' '/nix/store/cs4rqfki5h66wbc22snrw0pf8ph4gdq9-parser-combinators-1.3.0' '/nix/store/r23j4a1wr5w5jvwl24g82aikg55n4djd-mmorph-1.2.0' '/nix/store/45yp7xp7bhzaj6yfsgsw20wbd6id71jg-optparse-applicative-0.18.1.0' '/nix/store/prs2d4aj8d62k2ii497n1fr68brjgrdj-prettyprinter-1.7.1' '/nix/store/8gah3sww53xm8fslhz5pi1r0q5ldj4bm-prettyprinter-ansi-terminal-1.1.3' '/nix/store/rfx4yv0zwvmn3f9cz2bwvs002h8mxid5-parsers-0.12.11' '/nix/store/1cqpj6r6d103bsv6dd490jvl40gpv9y0-charset-0.3.10' '/nix/store/f7ffshd3mjlnnl6wc0pic4sr361pb1mj-pretty-simple-4.1.2.0' '/nix/store/3fbicv4f95dabrfa69w5djdr33fyj8si-repline-0.4.2.0' '/nix/store/cdayvcdvissk1pl2mmjyx6381w3hrm0x-serialise-0.2.6.1' '/nix/store/lblbh69dn4vd05nnvhx8zshkbyxrrr3s-text-manipulate-0.3.1.0' '/nix/store/9ifkv8yhyxrf69q1hicj89vszplbddmh-th-lift-instances-0.1.20' '/nix/store/azp2dnwphsa53gx6w2m5qsyw44xc36a0-th-lift-0.8.4' '/nix/store/z0030jafpqr2m34zdbifr3p6c6zr5k0i-hnix-0.17.0' '/nix/store/0j6hx02f95wbga3d2nzkr0g3543rf5al-cryptonite-0.30' '/nix/store/14a0s0dnfpzhxpcp5p1zyhdhgc3bxwsb-deriving-compat-0.6.6' '/nix/store/wp3dcy6v8ccnf13np52f4f3xm0gzgmj6-extra-1.7.16' '/nix/store/9vrk1x26q2wkjs9gvbryymg7xag3adxd-clock-0.8.4' '/nix/store/17n5qj2jy9vywsynsncw13knd58d07fr-free-5.2' '/nix/store/gibgfx9g7x61lyj0srmxvnm5iv2plgj2-transformers-base-0.4.6' '/nix/store/ql2xkpads3pgphkb5ahkkaca4zi782xh-gitrev-1.3.1' '/nix/store/j32r2697y38s69jqwnhb1sm54hq4slzw-hashing-0.1.1.0' '/nix/store/mcr9fy6l254b3dkchgjfvdrgv7izcrzg-hnix-store-core-0.6.1.0' '/nix/store/lhv7iqlq3gxs04cbb9006cccqqf0mc3z-algebraic-graphs-0.7' '/nix/store/pyvpi53a3s6mhc7sj0lwg7m25nak5wcl-lifted-base-0.2.3.12' '/nix/store/k4r5nfnw4rda2238z02izrgd298747rm-monad-control-1.0.3.1' '/nix/store/k4r5nfnw4rda2238z02izrgd298747rm-monad-control-1.0.3.1' '/nix/store/6snmnic1bazjca8pwk4xkip60x8khj1d-nix-derivation-1.1.3' '/nix/store/slpvyyv04p0rcz215h47j1dfp6ympl6r-pretty-show-1.10' '/nix/store/n2iwpqkrbrwvpsk2kkfl6g1qid50irar-haskell-lexer-1.1.1' '/nix/store/j1wd31qrmcqh1k060zlb0nr2g13ci02b-relude-1.2.2.0' '/nix/store/4fwaf8gzqkh0l1r0rlaj2lh8lwgbqnqa-saltine-0.2.1.0' '/nix/store/yzwc9ay1zbm1jchgdbrnaa115rxmyygc-hnix-store-remote-0.6.0.0' '/nix/store/qxi4bvk1imrz9rm80f6liik0vj5s6wrr-lens-family-2.1.3' '/nix/store/kvc621kv4b85z78jp0l6bvz75w1k0chm-lens-family-th-0.5.3.1' '/nix/store/cwrgir7mim9p42fspha5pxpp3ifqp31q-logict-0.8.1.0' '/nix/store/sxlggvyn3mrjsxiswsmij2wrzbvlhkyw-monadlist-0.0.2' '/nix/store/1vwwmkjxk4y5sikw7hai476nxl5x17y2-neat-interpolation-0.5.1.4' '/nix/store/gmnb1fgzl8brajz43sx6jrz16d4n9p1x-ref-tf-0.5.0.1' '/nix/store/4wplhalki2psaw7iggxb5bdhy5fn3x8x-regex-tdfa-1.3.2.2' '/nix/store/4z70d1gdwa1h8zcc8gc4w9inqhvjjzmx-regex-base-0.94.0.2' '/nix/store/vfa2hgj9c2m37brfbxmsk0rhc286vixy-some-1.0.6' '/nix/store/y6k5bra9m99hg6rwqglz4q462jfg313i-split-0.2.5' '/nix/store/04ip9i3gb8gxxfz10jkxb1i37mjyqc2l-syb-0.7.2.4' '/nix/store/byzrh6qyfh7fv183wh3a4zwvcynwj7ak-xml-1.3.14' '/nix/store/p5i56njd7922m53rzjyjk59l9hrsp4wf-optparse-generic-1.5.2' '/nix/store/5dyfy8apjb4js20saypfa0idbq6gfy3p-Only-0.1' '/nix/store/brii9gmvhkd4z32g3afv7p9dvcz9954j-void-0.7.3' '/nix/store/ffgw5dddlhic1gpagpywhhfj4h1lgnd5-nil-2024-08-06' '/nix/store/gc4rj634xf8bk5m2s44mf1qp3hiyj93k-taplo-0.9.3' '/nix/store/lycrxk2ypz3hz6iw63v6nbijnnlvdnch-lua-language-server-3.13.0' '/nix/store/xjlvb8x7z3f5rxxswa3c6ghay74a58jm-patchelf-0.15.0' '/nix/store/sjdccq7ywcpfjnmisl0ah60b7rg1cjpf-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/12lvf0c7xric9cny7slvf9cmhypl1p67-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/aazf105snicrlvyzzbdj85sx4179rpfp-set-source-date-epoch-to-latest.sh' '/nix/store/gps9qrh99j7g02840wv5x78ykmz30byp-strip.sh' '/nix/store/3ix5h74n7ar9950vwzp4dxmil70pmx0k-gcc-wrapper-13.3.0' '/nix/store/9bacph866qhmr2zfib1h49jixq5hhd01-binutils-wrapper-2.43.1' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=()
declare -a pkgsHostTarget=()
declare -a pkgsTargetTarget=()
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preferLocalBuild='1'
export preferLocalBuild
prefix='/home/evi1_f4iry/git/nixos_config/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/0irlcqx2n3qm6b1pc9rsd2i8qpvcccaj-bash-5.2p37/bin/bash'
export shell
shellHook=''
export shellHook
stdenv='/nix/store/gw0swsnbfk9l8d1il70psm8b3r5m33jv-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    while IFS='' read -r varName; do
        nixTalkativeLog "@${varName}@ -> ${!varName}";
        args+=("--subst-var" "$varName");
    done < <(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }')
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        nixTalkativeLog "calling implicit '$hookName' function hook";
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            nixTalkativeLog "sourcing implicit '$hookName' script hook";
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                nixTalkativeLog "evaling implicit '$hookName' string hook";
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_logHook ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    local hookKind="$1";
    local hookExpr="$2";
    shift 2;
    if declare -F "$hookExpr" > /dev/null 2>&1; then
        nixTalkativeLog "calling '$hookKind' function hook '$hookExpr'" "$@";
    else
        if type -p "$hookExpr" > /dev/null; then
            nixTalkativeLog "sourcing '$hookKind' script hook '$hookExpr'";
        else
            if [[ "$hookExpr" != "_callImplicitHook"* ]]; then
                local exprToOutput;
                if [[ ${NIX_DEBUG:-0} -ge 5 ]]; then
                    exprToOutput="$hookExpr";
                else
                    local hookExprLine;
                    while IFS= read -r hookExprLine; do
                        hookExprLine="${hookExprLine#"${hookExprLine%%[![:space:]]*}"}";
                        if [[ -n "$hookExprLine" ]]; then
                            exprToOutput+="$hookExprLine\\n ";
                        fi;
                    done <<< "$hookExpr";
                    exprToOutput="${exprToOutput%%\\n }";
                fi;
                nixTalkativeLog "evaling '$hookKind' string hook '$exprToOutput'";
            fi;
        fi;
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        nixTalkativeLog "sourcing setup hook '$pkg'";
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        nixTalkativeLog "sourcing setup hook '$pkg/nix-support/setup-hook'";
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addPythonPath ()
{
 
    addToSearchPathWithCustomDelimiter : PYTHONPATH $1/lib/python3.12/site-packages
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget="check";
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget="test";
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray checkFlags=VERBOSE=y checkFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
concatStringsSep ()
{
 
    local sep="$1";
    local name="$2";
    local type oldifs;
    if type=$(declare -p "$name" 2> /dev/null); then
        local -n nameref="$name";
        case "${type#* }" in 
            -A*)
                echo "concatStringsSep(): ERROR: trying to use concatStringsSep on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                local IFS="$sep";
                echo -n "${nameref[*]}"
            ;;
            *)
                echo -n "${nameref// /"${sep}"}"
            ;;
        esac;
    fi
}
concatTo ()
{
 
    local -;
    set -o noglob;
    local -n targetref="$1";
    shift;
    local arg default name type;
    for arg in "$@";
    do
        IFS="=" read -r name default <<< "$arg";
        local -n nameref="$name";
        if [[ -z "${nameref[*]}" && -n "$default" ]]; then
            targetref+=("$default");
        else
            if type=$(declare -p "$name" 2> /dev/null); then
                case "${type#* }" in 
                    -A*)
                        echo "concatTo(): ERROR: trying to use concatTo on an associative array." 1>&2;
                        return 1
                    ;;
                    -a*)
                        targetref+=("${nameref[@]}")
                    ;;
                    *)
                        if [[ "$name" = *"Array" ]]; then
                            nixErrorLog "concatTo(): $name is not declared as array, treating as a singleton. This will become an error in future";
                            targetref+=(${nameref+"${nameref[@]}"});
                        else
                            targetref+=(${nameref-});
                        fi
                    ;;
                esac;
            fi;
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        concatTo flagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    concatTo flagsArray distFlags distFlagsArray distTarget=dist;
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        { 
            install -m 0600 /dev/null "$NIX_BUILD_TOP/env-vars" && export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars"
        } || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.43.1: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.43.1: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
            concatTo flagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray installCheckTarget=installcheck;
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
    concatTo flagsArray makeFlags makeFlagsArray installFlags installFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
nixChattyLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 5 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixDebugLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 6 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixErrorLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 0 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixInfoLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 3 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixNoticeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 2 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixTalkativeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 4 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixVomitLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 7 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixWarnLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 1 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    concatTo patchesArray patches;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        concatTo flagsArray patchFlags=-p1;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" type -P "env" || true)";
                args="-S $(PATH="${!pathName}" type -P "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" type -P "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" type -P "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime endTime;
    startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x -- "${sourceRoot}";
        cd -- "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase";
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    printf "@nix { \"action\": \"setPhase\", \"phase\": \"%s\" }\n" "$phase" >&"$NIX_LOG_FD"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -printf '%D-%i,%p\0' | sort -t, -k1,1 -u -z | cut -d, -f2- -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    if ! [[ "${#fileNames[@]}" -gt 0 ]]; then
        echo "substituteInPlace called without any files to operate on (files must come before options!)" 1>&2;
        return 1;
    fi;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream() in derivation $name: WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        if [ "$replace_mode" == --replace-warn ]; then
                            printf "substituteStream() in derivation $name: WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                        else
                            if [ "$replace_mode" == --replace-fail ]; then
                                printf "substituteStream() in derivation $name: ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                                return 1;
                            fi;
                        fi;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream() in derivation $name: ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream() in derivation $name: ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream() in derivation $name: ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
sysconfigdataHook ()
{
 
    if [ "$1" = '/nix/store/px2nj16i5gc3d4mnw5l1nclfdxhry61p-python3-3.12.7' ]; then
        export _PYTHON_HOST_PLATFORM='linux-x86_64';
        export _PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu';
    fi
}
toPythonPath ()
{
 
    local paths="$1";
    local result=;
    for i in $paths;
    do
        p="$i/lib/python3.12/site-packages";
        result="${result}${result:+:}$p";
    done;
    echo $result
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    concatTo srcsArray srcs;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/hi0n0389lgyjp7v95q7wmxrf3db448xp-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    [[ $path == -* ]] && path="./$path";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "${shellHook:-}"
